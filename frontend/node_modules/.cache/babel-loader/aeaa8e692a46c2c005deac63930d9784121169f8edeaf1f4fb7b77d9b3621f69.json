{"ast":null,"code":"import React,{useState,useEffect}from'react';// Correctly define fetchBooks outside of the BookList component\nimport{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";async function fetchBooks(){try{const response=await fetch('http://localhost:5000/books');// Update this URL to your actual backend endpoint\nif(!response.ok){throw new Error('Network response was not ok');}const data=await response.json();return data;}catch(error){console.error(\"Error fetching books:\",error);return[];// Return an empty array in case of error\n}}function BookList(){const[books,setBooks]=useState([]);useEffect(()=>{const getBooks=async()=>{const fetchedBooks=await fetchBooks();setBooks(fetchedBooks);};getBooks();},[]);// The empty array means this runs once when the component mounts\nreturn/*#__PURE__*/_jsx(\"ul\",{className:\"book-list\",children:books.map(book=>/*#__PURE__*/_jsxs(\"li\",{className:\"book-item\",children:[book.title,\" by \",book.author]},book.id))});}export default BookList;","map":{"version":3,"names":["React","useState","useEffect","jsxs","_jsxs","jsx","_jsx","fetchBooks","response","fetch","ok","Error","data","json","error","console","BookList","books","setBooks","getBooks","fetchedBooks","className","children","map","book","title","author","id"],"sources":["/Users/ibrahim/PaceMark/frontend/src/components/BookList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Correctly define fetchBooks outside of the BookList component\nasync function fetchBooks() {\n    try {\n        const response = await fetch('http://localhost:5000/books'); // Update this URL to your actual backend endpoint\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error(\"Error fetching books:\", error);\n        return [];  // Return an empty array in case of error\n    }\n}\n\nfunction BookList() {\n  const [books, setBooks] = useState([]);\n\n  useEffect(() => {\n    const getBooks = async () => {\n      const fetchedBooks = await fetchBooks();\n      setBooks(fetchedBooks);\n    };\n\n    getBooks();\n  }, []); // The empty array means this runs once when the component mounts\n\n  return (\n    <ul className=\"book-list\">\n      {books.map(book => (\n        <li key={book.id} className=\"book-item\">{book.title} by {book.author}</li>\n      ))}\n    </ul>\n  );\n}\n\nexport default BookList;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAElD;AAAA,OAAAC,IAAA,IAAAC,KAAA,CAAAC,GAAA,IAAAC,IAAA,yBACA,cAAe,CAAAC,UAAUA,CAAA,CAAG,CACxB,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,6BAA6B,CAAC,CAAE;AAC7D,GAAI,CAACD,QAAQ,CAACE,EAAE,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,6BAA6B,CAAC,CAClD,CACA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClC,MAAO,CAAAD,IAAI,CACf,CAAE,MAAOE,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,MAAO,EAAE,CAAG;AAChB,CACJ,CAEA,QAAS,CAAAE,QAAQA,CAAA,CAAG,CAClB,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CAEtCC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAiB,QAAQ,CAAG,KAAAA,CAAA,GAAY,CAC3B,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAb,UAAU,CAAC,CAAC,CACvCW,QAAQ,CAACE,YAAY,CAAC,CACxB,CAAC,CAEDD,QAAQ,CAAC,CAAC,CACZ,CAAC,CAAE,EAAE,CAAC,CAAE;AAER,mBACEb,IAAA,OAAIe,SAAS,CAAC,WAAW,CAAAC,QAAA,CACtBL,KAAK,CAACM,GAAG,CAACC,IAAI,eACbpB,KAAA,OAAkBiB,SAAS,CAAC,WAAW,CAAAC,QAAA,EAAEE,IAAI,CAACC,KAAK,CAAC,MAAI,CAACD,IAAI,CAACE,MAAM,GAA3DF,IAAI,CAACG,EAA2D,CAC1E,CAAC,CACA,CAAC,CAET,CAEA,cAAe,CAAAX,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}